<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PMFightAcademy.Client</name>
    </assembly>
    <members>
        <member name="T:PMFightAcademy.Client.Authorization.AuthOptions">
            <summary>
            Jwt Options for server settings 
            </summary>
        </member>
        <member name="F:PMFightAcademy.Client.Authorization.AuthOptions.Issuer">
            <summary>
            Token issuer (producer).
            </summary>
        </member>
        <member name="F:PMFightAcademy.Client.Authorization.AuthOptions.Audience">
            <summary>
            Token audience (consumer).
            </summary>
        </member>
        <member name="F:PMFightAcademy.Client.Authorization.AuthOptions.Key">
            <summary>
            Token secret part.
            </summary>
        </member>
        <member name="F:PMFightAcademy.Client.Authorization.AuthOptions.Lifetime">
            <summary>
            Token life time.
            </summary>
        </member>
        <member name="T:PMFightAcademy.Client.Authorization.PasswordHashGenerator">
            <summary>
            Static class with extension method
            </summary>
        </member>
        <member name="M:PMFightAcademy.Client.Authorization.PasswordHashGenerator.GenerateHash(System.String)">
            <summary>
            Method for generate hash for password (HMACSHA256)
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:PMFightAcademy.Client.Authorization.PasswordValidatorAttribute">
            <summary>
            Validator for password
            </summary>
            <remarks>
            Password must have at least 8 chars
            At least 1 upper char
            and at least 1 number
            </remarks> 
        </member>
        <member name="T:PMFightAcademy.Client.Authorization.PhoneValidatorAttribute">
            <summary>
            Validator for phone number
            </summary>
            <remarks>
            Formats of phone number:
            +38067 111 1111
            067 111 1111
            Available country codes:
            039, 067, 068, 096, 097, 098, 050, 066, 095, 099, 063, 093, 091, 092, 094
            </remarks>
        </member>
        <member name="T:PMFightAcademy.Client.Contract.Dto.BookingDto">
            <summary>
            Booking a service dto model.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.BookingDto.Date">
            <summary>
            The date for the service to be provided.
            Should be in format "MM/dd/yyyy" but as a string.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.BookingDto.Time">
            <summary>
            The time for the service to be provided.
            Should be in format "HH:mm" but as a string.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.BookingDto.ServiceId">
            <summary>
            Service id to be provided.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.BookingDto.CoachId">
            <summary>
            Coach id to provide the service.
            </summary>
        </member>
        <member name="T:PMFightAcademy.Client.Contract.Dto.CoachDto">
            <summary>
            Coach dto model.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.CoachDto.Id">
            <summary>
            Coach id.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.CoachDto.FirstName">
            <summary>
            Coach first name.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.CoachDto.LastName">
            <summary>
            Coach last name.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.CoachDto.Age">
            <summary>
            Coach age.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.CoachDto.Description">
            <summary>
            Description about coach.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.CoachDto.PhoneNumber">
            <summary>
            Coach phone number.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.CoachDto.Services">
            <summary>
            Services which can be provided by the coach.
            Could be empty if no service is assigned to this coach.
            </summary>
        </member>
        <member name="T:PMFightAcademy.Client.Contract.Dto.DataForBookingDto">
            <summary>
            Data for booking dto model.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.DataForBookingDto.Services">
            <summary>
            Services available for a booking.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.DataForBookingDto.Coaches">
            <summary>
            Coaches available for a booking.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.DataForBookingDto.Dates">
            <summary>
            Dates available for a booking.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.DataForBookingDto.TimeSlots">
             <summary>
            Time slots available for a booking.
             </summary>
        </member>
        <member name="T:PMFightAcademy.Client.Contract.Dto.HistoryDto">
            <summary>
            History dto model.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.HistoryDto.ServiceName">
            <summary>
            Name of provided service.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.HistoryDto.Date">
            <summary>
            Date of provided service.
            Date is in format "MM/dd/yyyy".
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.HistoryDto.Time">
            <summary>
            Time of provided service.
            Time is in format "HH:mm".
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.HistoryDto.CoachFirstName">
            <summary>
            First name of the coach that provided the service
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.Dto.HistoryDto.CoachLastName">
            <summary>
            Last name of the coach that provided the service
            </summary>
        </member>
        <member name="M:PMFightAcademy.Client.Contract.Dto.HistoryDto.#ctor">
            <summary>
            Parameterless constructor.
            </summary>
        </member>
        <member name="M:PMFightAcademy.Client.Contract.Dto.HistoryDto.#ctor(System.String,System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            Constructor with parameters.
            </summary>
            <param name="serviceName">name of the provided service.</param>
            <param name="date">Date when the service is/was provided.</param>
            <param name="time">Time when the service is/was provided.</param>
            <param name="coachFirstName">First name of the coach who provided the service.</param>
            <param name="coachLastName">Last name of the coach who provided the service.</param>
        </member>
        <member name="T:PMFightAcademy.Client.Contract.GetDataContract`1">
            <summary>
            Contract for getting data with paggination.
            </summary>
            <typeparam name="T">The type of result data.</typeparam>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.GetDataContract`1.Data">
            <summary>
            The array of <typeparamref name="T"/> elements.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.GetDataContract`1.Paggination">
            <summary>
            Paggination state.
            </summary>
        </member>
        <member name="T:PMFightAcademy.Client.Contract.LoginContract">
            <summary>
            Contract for log in action.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.LoginContract.Login">
            <summary>
            Phone number (login).
            </summary>
            <remarks>
            Formats of phone number:
            +38067 111 1111
            067 111 1111
            Available country codes:
            039, 067, 068, 096, 097, 098, 050, 066, 095, 099, 063, 093, 091, 092, 094
            </remarks>
        </member>
        <member name="P:PMFightAcademy.Client.Contract.LoginContract.Password">
            <summary>
            Password.
            </summary>
            <remarks>
            Password must have at least 8 chars
            At least 1 upper char
            and at least 1 number
            </remarks> 
        </member>
        <member name="T:PMFightAcademy.Client.Controllers.BookingController">
            <summary>
            Service controller for sign up for a service/workout.
            </summary>
        </member>
        <member name="M:PMFightAcademy.Client.Controllers.BookingController.GetServicesForBooking(System.Threading.CancellationToken)">
            <summary>
            Get available services for client booking.
            </summary>
            <param name="token"></param>
            <returns>
            Returns <see cref="F:System.Net.HttpStatusCode.Unauthorized"/> if client is unauthorized.
            Returns <see cref="F:System.Net.HttpStatusCode.OK"/> with services list if client is authorized and there is at least one available service.
            Returns <see cref="F:System.Net.HttpStatusCode.NotFound"/> with <c>string</c> message if client is authorized and there is no available service.
            </returns>
            <remarks>
            Returns Unauthorized if client is unauthorized.
            Returns OK with services list if client is authorized and there is at least one available service.
            Returns NotFound with <c>string</c> message if client is authorized and there is no available service.
            </remarks>
        </member>
        <member name="M:PMFightAcademy.Client.Controllers.BookingController.GetCoachesForBooking(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get available coaches which can provide service with id <paramref name="serviceId"/>.
            </summary>
            <param name="serviceId"></param>Service id
            <param name="token"></param>
            <returns>
            Returns <see cref="F:System.Net.HttpStatusCode.Unauthorized"/> if client is unauthorized.
            Returns <see cref="F:System.Net.HttpStatusCode.OK"/> with coaches list if client is authorized and there is at least one available coach.
            Returns <see cref="F:System.Net.HttpStatusCode.NotFound"/> with <c>string</c> message if client is authorized and there is no available coach.
            </returns>
            <remarks>
            Returns Unauthorized if client is unauthorized.
            Returns OK with coaches list if client is authorized and there is at least one available coach.
            Returns NotFound with <c>string</c> message if client is authorized and there is no available coach.
            </remarks>
        </member>
        <member name="M:PMFightAcademy.Client.Controllers.BookingController.GetDatesForBooking(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get available dates to provide a service with id <paramref name="serviceId"/> by coach with id <paramref name="coachId"/>.
            </summary>
            <param name="serviceId"></param>Service id
            <param name="coachId"></param>Coach id
            <param name="token"></param>
            <returns>
            Returns <see cref="F:System.Net.HttpStatusCode.Unauthorized"/> if client is unauthorized.
            Returns <see cref="F:System.Net.HttpStatusCode.OK"/> with dates list if client is authorized and there is at least one available date.
            Returns <see cref="F:System.Net.HttpStatusCode.NotFound"/> with <c>string</c> message if client is authorized and there is no available date.
            </returns>
            <remarks>
            Dates will be returned in format "MM/dd/yyyy" as a <c>string</c>.
            Returns Unauthorized if client is unauthorized.
            Returns OK with dates list if client is authorized and there is at least one available date.
            Returns NotFound with <c>string</c> message if client is authorized and there is no available date.
            </remarks>
        </member>
        <member name="M:PMFightAcademy.Client.Controllers.BookingController.GetTimeSlotsForBooking(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Get available time slots to provide a service with id <paramref name="serviceId"/> 
            by coach with id <paramref name="coachId"/> as of the <paramref name="date"/>.
            </summary>
            <param name="serviceId"></param>Service id
            <param name="coachId"></param>Coach id
            <param name="date"></param>Date
            <param name="token"></param>
            <returns>
            Returns <see cref="F:System.Net.HttpStatusCode.Unauthorized"/> if client is unauthorized.
            Returns <see cref="F:System.Net.HttpStatusCode.OK"/> with time slots list if client is authorized and there is at least one available time slot.
            Returns <see cref="F:System.Net.HttpStatusCode.NotFound"/> with <c>string</c> message if client is authorized and there is no available time slot.
            </returns>
            <remarks>
            Date should be in format "MM/dd/yyyy" as a <c>string</c>.
            Time will be returned in format "HH:mm" as a <c>string</c>.
            Returns Unauthorized if client is unauthorized.
            Returns OK with time slots list if client is authorized and there is at least one available time slot.
            Returns NotFound with <c>string</c> message if client is authorized and there is no available time slot.
            </remarks>
        </member>
        <member name="M:PMFightAcademy.Client.Controllers.BookingController.AddBooking(PMFightAcademy.Client.Contract.Dto.BookingDto,System.Threading.CancellationToken)">
            <summary>
            Adds a booking.
            </summary>
            <param name="booking">Booking filters.</param>
            <param name="token"></param>
            <returns>
            <see cref="F:System.Net.HttpStatusCode.Unauthorized"/> if client is unauthorized.
            <see cref="F:System.Net.HttpStatusCode.OK"/> with <c>string</c> message if client is authorized and a booking was successfully added.
            <see cref="F:System.Net.HttpStatusCode.BadRequest"/> with <c>string</c> message if client is authorized and booking time is not available anymore
             or booking model is invalid.
            </returns>
            <remarks>
            Returns Unauthorized if client is unauthorized.
            Returns OK with <c>string</c> message if client is authorized and a booking was successfully added.
            Returns BadRequest with <c>string</c> message if client is authorized and booking time is not available anymore
             or booking model is invalid.
            </remarks>
        </member>
        <member name="M:PMFightAcademy.Client.Controllers.BookingController.GetActiveBookings(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets active bookings of services.
            </summary>
            <param name="pageSize">The count of active booking records to return at one time.</param>
            <param name="page">The current page number.</param>
            <param name="token"></param>
            <returns>
            <see cref="F:System.Net.HttpStatusCode.Unauthorized"/> if client is unauthorized.
            <see cref="F:System.Net.HttpStatusCode.OK"/> with active booking list if client is authorized and there is at least one record in the active booking list.
            <see cref="F:System.Net.HttpStatusCode.NotFound"/> with <c>string</c> message if client is authorized and there is no record in the active booking list.
            </returns>
            <remarks>
            Returns Unauthorized if client is unauthorized.
            Returns OK with active booking list if client is authorized and there is at least one record in the active booking list.
            Returns NotFound with <c>string</c> message if client is authorized and there is no record in the active booking list.
            </remarks>
        </member>
        <member name="M:PMFightAcademy.Client.Controllers.BookingController.GetHistory(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets booking history.
            </summary>
            <param name="pageSize">The count of history records to return at one time.</param>
            <param name="page">The current page number.</param>
            <param name="token"></param>
            <returns>
            <see cref="F:System.Net.HttpStatusCode.Unauthorized"/> if client is unauthorized.
            <see cref="F:System.Net.HttpStatusCode.OK"/> with booking history if client is authorized and there is at least one record in the history.
            <see cref="F:System.Net.HttpStatusCode.NotFound"/> with <c>string</c> message if client is authorized and there is no record in the history.
            </returns>
            <remarks>
            Returns Unauthorized if client is unauthorized.
            Returns OK with booking history if client is authorized and there is at least one record in the history.
            Returns NotFound with <c>string</c> message if client is authorized and there is no record in the history.
            </remarks>
        </member>
        <member name="T:PMFightAcademy.Client.Controllers.ClientsController">
            <summary>
            Client controller.
            Formats of phone number:
            +38067 111 1111
            067 111 1111
            Available country codes:
            039, 067, 068, 096, 097, 098, 050, 066, 095, 099, 063, 093, 091, 092, 094
            Password must have at least 8 chars
            At least 1 upper char
            and at least 1 number
            </summary> 
        </member>
        <member name="M:PMFightAcademy.Client.Controllers.ClientsController.Register(PMFightAcademy.Client.Models.Client,System.Threading.CancellationToken)">
            <summary>
            Registers a new client.
            </summary>
            <param name="model">Client to register.</param>
            <param name="cancellationToken"></param>
            <returns>
            <see cref="F:System.Net.HttpStatusCode.OK"/> with <c>string</c> result message if client was successfully registered.
            <see cref="F:System.Net.HttpStatusCode.BadRequest"/> if <paramref name="model"/> data is invalid.
            <see cref="F:System.Net.HttpStatusCode.Conflict"/> if <see cref="P:PMFightAcademy.Client.Models.Client.Login"/> already exists.
            </returns>
            <remarks>
            Returns OK with <c>string</c> message if client was successfully registered.
            Returns BadRequest if <paramref name="model"/> data is invalid.
            Returns Conflict if login already exists.
            </remarks>
        </member>
        <member name="M:PMFightAcademy.Client.Controllers.ClientsController.Login(PMFightAcademy.Client.Contract.LoginContract,System.Threading.CancellationToken)">
            <summary>
            Loggs in a registered client.
            </summary>
            <param name="model">Contract for login action.</param>
            <param name="cancellationToken"></param>
            <returns>
            <see cref="F:System.Net.HttpStatusCode.OK"/> with <c>string</c> jwt-token if client was successfully logged in.
            <see cref="F:System.Net.HttpStatusCode.BadRequest"/> if login or password are invalid.
            </returns>
            <remarks>
            Returns OK with <c>string</c> jwt-token if client was successfully logged in.
            Returns BadRequest if login or password are invalid.
            </remarks>
        </member>
        <member name="T:PMFightAcademy.Client.Controllers.CoachesController">
            <summary>
            Coach controller.
            </summary>
        </member>
        <member name="M:PMFightAcademy.Client.Controllers.CoachesController.#ctor(PMFightAcademy.Client.Services.ICoachesStorageService,PMFightAcademy.Client.DataBase.ClientContext)">
            <summary>
            Constructor with DI.
            </summary>
        </member>
        <member name="M:PMFightAcademy.Client.Controllers.CoachesController.Get(System.Int32,System.Int32,System.String)">
            <summary>
            Portioned return of coaches data.
            </summary>
            <param name="pageSize">The count of coaches to return at one time.</param>
            <param name="page">The current page number.</param>
            <param name="filter">Optional <c>string</c> filter parameter - searching by coach's first or last name.</param>
            <returns>
            <see cref="F:System.Net.HttpStatusCode.Unauthorized"/> if client is unauthorized.
            <see cref="F:System.Net.HttpStatusCode.OK"/> with coaches list if client is authorized and there is at least one coach for the corresponding request.
            <see cref="F:System.Net.HttpStatusCode.NotFound"/> with <c>string</c> message if client is authorized and there is no coach for the corresponding request.
            </returns>
            <remarks>
            Returns Unauthorized if client is unauthorized.
            Returns OK with coaches list if client is authorized and there is at least one coach for the corresponding request.
            Returns NotFound with <c>string</c> message if client is authorized and there is no coach for the corresponding request.
            </remarks>
        </member>
        <member name="T:PMFightAcademy.Client.Controllers.ValuesController">
            <summary>
            Just information about service.
            </summary>
        </member>
        <member name="M:PMFightAcademy.Client.Controllers.ValuesController.GetInfo">
            <summary>
            Just information about service.
            </summary>
        </member>
        <member name="T:PMFightAcademy.Client.Mappings.BookingMapping">
            <summary>
            Mapping for Book
            </summary>
        </member>
        <member name="M:PMFightAcademy.Client.Mappings.BookingMapping.BookingMapFromContractToModel(PMFightAcademy.Client.Contract.Dto.BookingDto,System.Int32,System.Int32,System.Decimal)">
            <summary>
            From Contract to model
            </summary>
            <param name="contract"></param>
            <param name="slotId"></param>
            <param name="clientId"></param>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:PMFightAcademy.Client.Mappings.BookingMapping.CoachMapFromModelToContract(PMFightAcademy.Client.Models.Booking,System.String,System.String,System.Int32)">
            <summary>
            From model to contract
            </summary>
            <param name="model"></param>
            <param name="date"></param>
            <param name="time"></param>
            <param name="coachId"></param>
            <returns></returns>
        </member>
        <member name="T:PMFightAcademy.Client.Mappings.CoachMapping">
            <summary>
            Converts <see cref="T:PMFightAcademy.Client.Models.Coach"/> to <see cref="T:PMFightAcademy.Client.Contract.Dto.CoachDto"/>.
            </summary>
        </member>
        <member name="M:PMFightAcademy.Client.Mappings.CoachMapping.CoachToCoachDto(PMFightAcademy.Client.Models.Coach)">
            <summary>
            Converts <see cref="T:PMFightAcademy.Client.Models.Coach"/> model to the <see cref="T:PMFightAcademy.Client.Contract.Dto.CoachDto"/> one.
            </summary>
            <param name="coach"><paramref name="coach"/> to convert.</param>
            <returns>Converted <see cref="T:PMFightAcademy.Client.Contract.Dto.CoachDto"/> coach.</returns>
        </member>
        <member name="M:PMFightAcademy.Client.Mappings.CoachMapping.CoachWithServicesToCoachDto(PMFightAcademy.Client.Models.Coach,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts <see cref="T:PMFightAcademy.Client.Models.Coach"/> model to the <see cref="T:PMFightAcademy.Client.Contract.Dto.CoachDto"/> one.
            </summary>
            <param name="coach"><paramref name="coach"/> to convert.</param>
            <param name="services">Services which can be provided by the coach.</param>
            <returns>Converted <see cref="T:PMFightAcademy.Client.Contract.Dto.CoachDto"/> coach.</returns>
        </member>
        <member name="T:PMFightAcademy.Client.Models.Booking">
            <summary>
            Booking a service model.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Booking.Id">
            <summary>
            Booking id.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Booking.SlotId">
            <summary>
            Slot id for the booking.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Booking.Slot">
            <summary>
            
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Booking.ServiceId">
            <summary>
            Service id for the booking.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Booking.Service">
            <summary>
            
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Booking.ClientId">
            <summary>
            Client id  for the booking.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Booking.Client">
            <summary>
            
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Booking.ResultPrice">
            <summary>
            Result price of the booking.
            </summary>
        </member>
        <member name="T:PMFightAcademy.Client.Models.Client">
            <summary>
            Client model.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Client.Id">
            <summary>
            User id  
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Client.Login">
            <summary>
            User login represented by his/her phone number.
            </summary>
            <remarks>
            Formats of phone number:
            +38067 111 1111
            067 111 1111
            Available country codes:
            039, 067, 068, 096, 097, 098, 050, 066, 095, 099, 063, 093, 091, 092, 094
            </remarks>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Client.Password">
            <summary>
            User password.
            </summary>
            <remarks>
            Password must have at least 8 chars
            At least 1 upper char
            and at least 1 number
            </remarks> 
        </member>
        <member name="P:PMFightAcademy.Client.Models.Client.Name">
            <summary>
            User name.
            </summary>
        </member>
        <member name="T:PMFightAcademy.Client.Models.Coach">
            <summary>
            Coach model.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Coach.Id">
            <summary>
            Coach id.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Coach.FirstName">
            <summary>
            Coach first name.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Coach.LastName">
            <summary>
            Coach last name.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Coach.BirthDate">
            <summary>
            Coach date of birth.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Coach.Description">
            <summary>
            Description about coach.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Coach.PhoneNumber">
            <summary>
            Coach phone number.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Coach.Slots">
            <summary>
            
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Coach.Qualifications">
            <summary>
            
            </summary>
        </member>
        <member name="T:PMFightAcademy.Client.Models.Paggination">
            <summary>
            Paggination model.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Paggination.Page">
            <summary>
            Current page number.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Paggination.TotalPages">
            <summary>
            Total pages count.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Paggination.HasPreviousPage">
            <summary>
            Indicates if the current page has a previous one.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Paggination.HasNextPage">
            <summary>
            Indicates if the current page has a next one.
            </summary>
        </member>
        <member name="T:PMFightAcademy.Client.Models.Qualification">
            <summary>
            Coach qualification. 
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Qualification.Id">
            <summary>
            Qualification id.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Qualification.CoachId">
            <summary>
            Coach id.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Qualification.Coach">
            <summary>
            
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Qualification.ServiceId">
            <summary>
            Service id.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Qualification.Service">
            <summary>
            
            </summary>
        </member>
        <member name="T:PMFightAcademy.Client.Models.Service">
            <summary>
            Service model.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Service.Id">
            <summary>
            Service id.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Service.Name">
            <summary>
            Service title.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Service.Description">
            <summary>
            Service description.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Service.Price">
            <summary>
            Service price per hour.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Service.Qualifications">
            <summary>
            
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Service.Bookings">
            <summary>
            
            </summary>
        </member>
        <member name="T:PMFightAcademy.Client.Models.Slot">
            <summary>
            Slot model.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Slot.Id">
            <summary>
            Slot id.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Slot.Date">
            <summary>
            Date of slot.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Slot.StartTime">
            <summary>
            Slot start time.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Slot.Duration">
            <summary>
            Duration of slot.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Slot.CoachId">
            <summary>
            Coach of slot.
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Slot.Coach">
            <summary>
            
            </summary>
        </member>
        <member name="P:PMFightAcademy.Client.Models.Slot.Bookings">
            <summary>
            
            </summary>
        </member>
        <member name="T:PMFightAcademy.Client.Services.BookingService">
            <summary>
            Service for booking controller
            </summary>
        </member>
        <member name="M:PMFightAcademy.Client.Services.BookingService.GetServicesForBooking">
            <summary>
            Get available services for client booking for Booking Controller
            </summary>
        </member>
        <member name="M:PMFightAcademy.Client.Services.BookingService.GetCoachesForBooking(System.Int32)">
            <summary>
            Get available coaches which can provide service with id <paramref name="serviceId"/> for Booking Controller  
            </summary>
            <param name="serviceId"></param>
            <returns></returns>
        </member>
        <member name="M:PMFightAcademy.Client.Services.BookingService.GetDatesForBooking(System.Int32,System.Int32)">
            <summary>
            Get available dates to provide a service with id <paramref name="serviceId"/> by coach with id <paramref name="coachId"/>
            for Booking Controller
            </summary>
            <param name="serviceId"></param>
            <param name="coachId"></param>
            <returns></returns>
        </member>
        <member name="M:PMFightAcademy.Client.Services.BookingService.GetTimeSlotsForBooking(System.Int32,System.Int32,System.String)">
            <summary>
            Get available time slots to provide a service with id <paramref name="serviceId"/> for Booking Controller
            </summary>
            <param name="serviceId"></param>
            <param name="coachId"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:PMFightAcademy.Client.Services.BookingService.AddBooking(PMFightAcademy.Client.Contract.Dto.BookingDto,System.Int32)">
            <summary>
            Adds a booking for Booking Controller
            </summary>
            <param name="bookingDto"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="T:PMFightAcademy.Client.Services.CoachesEFService">
            <summary>
            Service for getting coaches from database with Entity Framework.
            </summary>
        </member>
        <member name="M:PMFightAcademy.Client.Services.CoachesEFService.#ctor(PMFightAcademy.Client.DataBase.ClientContext)">
            <summary>
            Constructor with DI.
            </summary>
        </member>
        <member name="M:PMFightAcademy.Client.Services.CoachesEFService.GetCoaches(System.Int32,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:PMFightAcademy.Client.Services.IBookingService">
            <summary>
            Booking service abstraction.
            </summary>
        </member>
        <member name="M:PMFightAcademy.Client.Services.IBookingService.GetServicesForBooking">
            <summary>
            Get available services for client booking for Booking Controller.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMFightAcademy.Client.Services.IBookingService.GetCoachesForBooking(System.Int32)">
            <summary>
            Get available coaches which can provide service with id <paramref name="serviceId"/> for Booking Controller  
            </summary>
            <param name="serviceId">Id of the service.</param>
            <returns>List of coaches of type <see cref="T:PMFightAcademy.Client.Contract.Dto.CoachDto"/></returns>
        </member>
        <member name="M:PMFightAcademy.Client.Services.IBookingService.GetDatesForBooking(System.Int32,System.Int32)">
            <summary>
            Get available dates in format "MM/dd/yyyy" to provide a service with id <paramref name="serviceId"/> by coach with id <paramref name="coachId"/>
            for Booking Controller
            </summary>
            <param name="serviceId">Id of the service.</param>
            <param name="coachId">Id of the coach.</param>
            <returns>List of available dates each as a string in format "MM/dd/yyyy".</returns>
        </member>
        <member name="M:PMFightAcademy.Client.Services.IBookingService.GetTimeSlotsForBooking(System.Int32,System.Int32,System.String)">
            <summary>
            Get available time slots in format "HH:mm" to provide a service with id <paramref name="serviceId"/> for Booking Controller
            </summary>
            <param name="serviceId">Id of the service.</param>
            <param name="coachId">Id of the coach.</param>
            <param name="date">Selected date as a string in format "MM/dd/yyyy".</param>
            <returns>List of available time slots in format "HH:mm".</returns>
        </member>
        <member name="M:PMFightAcademy.Client.Services.IBookingService.AddBooking(PMFightAcademy.Client.Contract.Dto.BookingDto,System.Int32)">
            <summary>
            Adds a booking for Booking Controller.
            </summary>
            <param name="bookingDto">Data for booking.</param>
            <param name="clientId">Id of the client who books a service.</param>
        </member>
        <member name="T:PMFightAcademy.Client.Services.ICoachesStorageService">
            <summary>
            Coaches storage service abstraction.
            </summary>
        </member>
        <member name="M:PMFightAcademy.Client.Services.ICoachesStorageService.GetCoaches(System.Int32,System.Int32,System.String)">
            <summary>
            Gets coaches list with paggination.
            </summary>
            <param name="skipCount">How many coaches to skip.</param>
            <param name="takeCount">How many coaches to take.</param>
            <param name="filter">Optional filter for searching corresponding coaches (by first or last name).</param>
            <returns>Returns list of found coaches or empty list if there is no coach.</returns>
        </member>
    </members>
</doc>
